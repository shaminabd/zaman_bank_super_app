import '../services/goal_service.dart';

class FunctionCallHandler {
  static bool shouldTriggerGoalCreation(String message) {
    final lowerMessage = message.toLowerCase();
    final goalKeywords = [
      'goal:',
      'goal',
      '—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å',
      '–¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å',
      '–Ω–æ–≤–∞—è —Ü–µ–ª—å',
      '—Ö–æ—á—É –Ω–∞–∫–æ–ø–∏—Ç—å',
      '–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞',
      '—Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è',
      '—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è',
      '—Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω',
      '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å',
      '—Ü–µ–ª—å –ø–æ –¥–µ–Ω—å–≥–∞–º',
      '–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
      '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å',
      '—Ö–æ—á—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å',
      '—Ö–æ—á—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
      '—Ü–µ–ª—å –Ω–∞',
      '–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–∞',
      '—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –Ω–∞',
      '–ø–ª–∞–Ω–∏—Ä—É—é –Ω–∞–∫–æ–ø–∏—Ç—å',
      '—Ö–æ—á—É —Å–æ–±—Ä–∞—Ç—å',
      '—Å–æ–±—Ä–∞—Ç—å –Ω–∞',
      'create goal',
      'add goal',
      'new goal',
      'save money',
      'financial goal',
      'set goal',
      'establish goal',
    ];
    
    return goalKeywords.any((keyword) => lowerMessage.contains(keyword));
  }

  static String categorizeTransaction(String message) {
    final lowerMessage = message.toLowerCase();
    
    if (lowerMessage.contains('–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è') || lowerMessage.contains('–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ') || 
        lowerMessage.contains('–µ–¥–∞') || lowerMessage.contains('–ø—Ä–æ–¥—É–∫—Ç—ã') ||
        lowerMessage.contains('–ª–µ–∫–∞—Ä—Å—Ç–≤–∞') || lowerMessage.contains('–º–µ–¥–∏—Ü–∏–Ω–∞') ||
        lowerMessage.contains('–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ') || lowerMessage.contains('—É—Å–ª—É–≥–∏')) {
      return '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è';
    } else if (lowerMessage.contains('–ø–æ–∫—É–ø–∫–∏') || lowerMessage.contains('–ø–æ–∫—É–ø–∫–∞') ||
               lowerMessage.contains('–æ–¥–µ–∂–¥–∞') || lowerMessage.contains('–æ–±—É–≤—å') ||
               lowerMessage.contains('—Ç–µ—Ö–Ω–∏–∫–∞') || lowerMessage.contains('—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')) {
      return '–ü–æ–∫—É–ø–∫–∏';
    } else if (lowerMessage.contains('—Å–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è') || lowerMessage.contains('—Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ') ||
               lowerMessage.contains('—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è') || lowerMessage.contains('–æ—Ç–¥—ã—Ö') ||
               lowerMessage.contains('–¥–æ—Å—É–≥')) {
      return '–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è';
    } else {
      return '–î—Ä—É–≥–æ–µ';
    }
  }

  static String generateCategorizationResponse(String category) {
    switch (category) {
      case '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è':
        return '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é. –¢–∞–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –≤–∞–∂–Ω—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!';
      case '–ü–æ–∫—É–ø–∫–∏':
        return 'üõçÔ∏è –ü–æ–Ω—è—Ç–Ω–æ! –≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–∫—É–ø–∫–∞–º–∏. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞—Ä–∞–Ω–µ–µ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Å–≤–æ–π –±—é–¥–∂–µ—Ç.';
      case '–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è':
        return 'üí´ –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥ –¥–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤.';
      case '–î—Ä—É–≥–æ–µ':
        return 'üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.';
      default:
        return '–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.';
    }
  }

  static Map<String, dynamic>? extractGoalInfo(String message) {
    final lowerMessage = message.toLowerCase();
    
    // Extract amount
    final amountRegex = RegExp(r'(\d+(?:\.\d+)?)\s*(?:‚Ç∏|—Ç–µ–Ω–≥–µ|—Ç—ã—Å—è—á|–º–ª–Ω|–º–∏–ª–ª–∏–æ–Ω)');
    final amountMatch = amountRegex.firstMatch(message);
    double? amount;
    if (amountMatch != null) {
      amount = double.tryParse(amountMatch.group(1) ?? '');
      if (lowerMessage.contains('–º–ª–Ω') || lowerMessage.contains('–º–∏–ª–ª–∏–æ–Ω')) {
        amount = amount != null ? amount * 1000000 : null;
      } else if (lowerMessage.contains('—Ç—ã—Å—è—á')) {
        amount = amount != null ? amount * 1000 : null;
      }
    }

    // Extract title/description
    String? title;
    if (lowerMessage.contains('–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞')) {
      final titleMatch = RegExp(r'–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ (.+?)(?:\s+\d|$)').firstMatch(message);
      title = titleMatch?.group(1)?.trim();
    } else if (lowerMessage.contains('—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å')) {
      final titleMatch = RegExp(r'—Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å (.+?)(?:\s+–¥–æ|\s+\d|$)').firstMatch(message);
      title = titleMatch?.group(1)?.trim();
    } else if (lowerMessage.contains('—Ü–µ–ª—å')) {
      final titleMatch = RegExp(r'—Ü–µ–ª—å[:\s]*(.+?)(?:\s+\d|$)').firstMatch(message);
      title = titleMatch?.group(1)?.trim();
    } else if (lowerMessage.contains('–Ω–∞')) {
      final titleMatch = RegExp(r'–Ω–∞ (.+?)(?:\s+\d|$)').firstMatch(message);
      title = titleMatch?.group(1)?.trim();
    }

    // Extract deadline
    String? deadline;
    bool hasDeadline = false;
    
    // Check for specific date patterns
    final dateRegex = RegExp(r'(\d{1,2})[./](\d{1,2})[./](\d{4})');
    final dateMatch = dateRegex.firstMatch(message);
    if (dateMatch != null) {
      deadline = '${dateMatch.group(1)}.${dateMatch.group(2)}.${dateMatch.group(3)}';
      hasDeadline = true;
    }
    
    // Check for Russian date patterns like "30–≥–æ —è–Ω–≤–∞—Ä—è", "–¥–æ 30–≥–æ —è–Ω–≤–∞—Ä—è"
    if (!hasDeadline) {
      final russianDateRegex = RegExp(r'(\d{1,2})–≥–æ\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)');
      final russianDateMatch = russianDateRegex.firstMatch(message);
      if (russianDateMatch != null) {
        final day = russianDateMatch.group(1)!;
        final monthName = russianDateMatch.group(2)!;
        
        // Convert month name to number
        final monthMap = {
          '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
          '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08',
          '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
        };
        
        final monthNumber = monthMap[monthName];
        if (monthNumber != null) {
          final currentYear = DateTime.now().year;
          deadline = '$day.$monthNumber.$currentYear';
          hasDeadline = true;
        }
      }
    }
    
    // Check for relative time patterns
    if (!hasDeadline) {
      if (lowerMessage.contains('—á–µ—Ä–µ–∑') && lowerMessage.contains('–º–µ—Å—è—Ü')) {
        final monthMatch = RegExp(r'—á–µ—Ä–µ–∑ (\d+) –º–µ—Å—è—Ü').firstMatch(message);
        if (monthMatch != null) {
          final months = int.tryParse(monthMatch.group(1) ?? '') ?? 1;
          deadline = '—á–µ—Ä–µ–∑ $months –º–µ—Å—è—Ü(–∞)';
          hasDeadline = true;
        }
      } else if (lowerMessage.contains('—á–µ—Ä–µ–∑') && lowerMessage.contains('–≥–æ–¥')) {
        final yearMatch = RegExp(r'—á–µ—Ä–µ–∑ (\d+) –≥–æ–¥').firstMatch(message);
        if (yearMatch != null) {
          final years = int.tryParse(yearMatch.group(1) ?? '') ?? 1;
          deadline = '—á–µ—Ä–µ–∑ $years –≥–æ–¥(–∞)';
          hasDeadline = true;
        }
      } else if (lowerMessage.contains('–∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞')) {
        deadline = '–∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞';
        hasDeadline = true;
      } else if (lowerMessage.contains('–∫ –Ω–∞—á–∞–ª—É –≥–æ–¥–∞')) {
        deadline = '–∫ –Ω–∞—á–∞–ª—É –≥–æ–¥–∞';
        hasDeadline = true;
      }
    }

    return {
      'amount': amount,
      'title': title,
      'deadline': deadline,
      'hasAmount': amount != null,
      'hasTitle': title != null,
      'hasDeadline': hasDeadline,
    };
  }

  static String generateGoalResponse(String message, Map<String, dynamic> goalInfo) {
    final hasAmount = goalInfo['hasAmount'] as bool;
    final hasTitle = goalInfo['hasTitle'] as bool;
    final hasDeadline = goalInfo['hasDeadline'] as bool? ?? false;
    final amount = goalInfo['amount'] as double?;
    final title = goalInfo['title'] as String?;
    final deadline = goalInfo['deadline'] as String?;

    if (hasAmount && hasTitle && hasDeadline) {
      return "–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ–∑–¥–∞–º —Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:\n\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ**: $title\nüí∞ **–°—É–º–º–∞**: ${amount!.toStringAsFixed(0)} ‚Ç∏\nüìÖ **–°—Ä–æ–∫**: $deadline\n\n–°–æ–∑–¥–∞—Ç—å —ç—Ç—É —Ü–µ–ª—å? (–î–∞/–ù–µ—Ç)";
    } else if (hasAmount && hasTitle && !hasDeadline) {
      return "–ü–æ–Ω—è–ª! –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å ${amount!.toStringAsFixed(0)} ‚Ç∏ –Ω–∞ $title. –ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–π —Ü–µ–ª–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤, –∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞, –∫ 1 —è–Ω–≤–∞—Ä—è 2025)";
    } else if (hasAmount && !hasTitle) {
      return "–ü–æ–Ω—è–ª! –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å ${amount!.toStringAsFixed(0)} ‚Ç∏. –ù–∞ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–∞—à–∏–Ω–∞, –æ—Ç–ø—É—Å–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞)";
    } else if (!hasAmount && hasTitle) {
      return "–ü–æ–Ω—è–ª! –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ $title. –ö–∞–∫—É—é —Å—É–º–º—É –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å? (–≤ —Ç–µ–Ω–≥–µ)";
    } else {
      return "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è. –ù–∞ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –∏ –∫–∞–∫—É—é —Å—É–º–º—É –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å?";
    }
  }

  static bool isGoalConfirmation(String message) {
    final lowerMessage = message.toLowerCase();
    return lowerMessage.contains('–¥–∞') || 
           lowerMessage.contains('yes') || 
           lowerMessage.contains('—Å–æ–∑–¥–∞—Ç—å') ||
           lowerMessage.contains('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é');
  }

  static Future<String> createGoalFromChat(String userId, Map<String, dynamic> goalInfo) async {
    try {
      // Auto-fill missing information with smart defaults
      final amount = goalInfo['amount'] as double? ?? 1000000.0;
      final title = goalInfo['title'] as String? ?? '–ù–æ–≤–∞—è —Ü–µ–ª—å';
      final deadlineText = goalInfo['deadline'] as String? ?? '—á–µ—Ä–µ–∑ 1 –≥–æ–¥';
      
      // Parse deadline
      DateTime deadline;
      if (deadlineText.contains('—á–µ—Ä–µ–∑') && deadlineText.contains('–º–µ—Å—è—Ü')) {
        final monthMatch = RegExp(r'—á–µ—Ä–µ–∑ (\d+) –º–µ—Å—è—Ü').firstMatch(deadlineText);
        final months = int.tryParse(monthMatch?.group(1) ?? '1') ?? 1;
        deadline = DateTime.now().add(Duration(days: months * 30));
      } else if (deadlineText.contains('—á–µ—Ä–µ–∑') && deadlineText.contains('–≥–æ–¥')) {
        final yearMatch = RegExp(r'—á–µ—Ä–µ–∑ (\d+) –≥–æ–¥').firstMatch(deadlineText);
        final years = int.tryParse(yearMatch?.group(1) ?? '1') ?? 1;
        deadline = DateTime.now().add(Duration(days: years * 365));
      } else if (deadlineText.contains('–∫ –∫–æ–Ω—Ü—É –≥–æ–¥–∞')) {
        deadline = DateTime(DateTime.now().year, 12, 31);
      } else if (deadlineText.contains('–∫ –Ω–∞—á–∞–ª—É –≥–æ–¥–∞')) {
        deadline = DateTime(DateTime.now().year + 1, 1, 1);
      } else if (deadlineText.contains('.')) {
        // Handle DD.MM.YYYY format
        final parts = deadlineText.split('.');
        if (parts.length == 3) {
          final day = int.tryParse(parts[0]) ?? 1;
          final month = int.tryParse(parts[1]) ?? 1;
          final year = int.tryParse(parts[2]) ?? DateTime.now().year;
          deadline = DateTime(year, month, day);
        } else {
          deadline = DateTime.now().add(const Duration(days: 365));
        }
      } else {
        deadline = DateTime.now().add(const Duration(days: 365));
      }

      // Get user balance for money allocation
      final balance = await _getUserBalance(userId);
      final moneyAmount = _calculateMoneyAmount(balance, amount);

      await GoalService.createGoal(
        userId: userId,
        title: title,
        amountTarget: amount,
        deadlineDate: deadline,
      );

      return "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ù–æ–≤–∞—è —Ü–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!**\n\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ**: $title\nüí∞ **–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞**: ${amount.toStringAsFixed(0)} ‚Ç∏\nüìÖ **–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**: ${deadline.day}.${deadline.month}.${deadline.year}\nüíµ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å**: ${moneyAmount.toStringAsFixed(0)} ‚Ç∏\n\n‚ú® –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ \"–¶–µ–ª–∏\". –£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–µ–π —Ü–µ–ª–∏!";
    } catch (e) {
      return "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏**: ${e.toString()}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    }
  }

  static Future<double> _getUserBalance(String userId) async {
    try {
      return await GoalService.getUserBalance(userId);
    } catch (e) {
      return 0.0;
    }
  }

  static double _calculateMoneyAmount(double balance, double targetAmount) {
    if (balance <= 0) return 0.0;
    
    // Calculate 10-20% of balance as recommended amount
    final percentage = 0.15; // 15% of current balance
    final recommendedAmount = balance * percentage;
    
    // Don't exceed 50% of target amount
    final maxAmount = targetAmount * 0.5;
    
    return recommendedAmount > maxAmount ? maxAmount : recommendedAmount;
  }
}
